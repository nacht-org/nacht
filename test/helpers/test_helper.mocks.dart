// Mocks generated by Mockito 5.1.0 from annotations
// in nacht/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nacht_sources/src/interfaces/novel.dart' as _i3;
import 'package:nacht_sources/src/models/models.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeNovel_0 extends _i1.Fake implements _i2.Novel {}

/// A class which mocks [ParseNovel].
///
/// See the documentation for Mockito's code generation for more information.
class MockParseNovel extends _i1.Mock implements _i3.ParseNovel {
  MockParseNovel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Novel> parseNovel(String? url) =>
      (super.noSuchMethod(Invocation.method(#parseNovel, [url]),
              returnValue: Future<_i2.Novel>.value(_FakeNovel_0()))
          as _i4.Future<_i2.Novel>);
  @override
  _i4.Future<void> parseChapter(_i2.Chapter? chapter) =>
      (super.noSuchMethod(Invocation.method(#parseChapter, [chapter]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [ParsePopular].
///
/// See the documentation for Mockito's code generation for more information.
class MockParsePopular extends _i1.Mock implements _i3.ParsePopular {
  MockParsePopular() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String buildPopularUrl(int? page) =>
      (super.noSuchMethod(Invocation.method(#buildPopularUrl, [page]),
          returnValue: '') as String);
  @override
  _i4.Future<List<_i2.Novel>> parsePopular(int? page) =>
      (super.noSuchMethod(Invocation.method(#parsePopular, [page]),
              returnValue: Future<List<_i2.Novel>>.value(<_i2.Novel>[]))
          as _i4.Future<List<_i2.Novel>>);
}
